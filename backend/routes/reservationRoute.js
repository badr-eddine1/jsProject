import express from 'express';
import Reservation from '../models/Reservation.js';
import verifyToken from '../middleware/authmiddlware.js';

const router = express.Router();

// üîí Cr√©er une r√©servation
router.post('/', verifyToken, async (req, res) => {
  try {
    const {
      logementId,
      dateArrivee,
      dateDepart,
      nombrePersonnes,
      telephone,
      adresse,
      preferences,
      montantTotal
    } = req.body;

    const newReservation = new Reservation({
      logementId,
      utilisateurId: req.user.userId,
      dateArrivee,
      dateDepart,
      nombrePersonnes,
      telephone,
      adresse,
      preferences,
      montantTotal
    });

    const savedReservation = await newReservation.save();
    res.status(201).json(savedReservation);
  } catch (err) {
    res.status(500).json({ message: 'Erreur lors de la cr√©ation de la r√©servation', error: err.message });
  }
});

// üîí R√©cup√©rer les r√©servations de l'utilisateur connect√©
router.get('/me', verifyToken, async (req, res) => {
  try {
    const reservations = await Reservation.find({ utilisateurId: req.user.userId }).populate('logementId');
    res.status(200).json(reservations);
  } catch (err) {
    res.status(500).json({ message: 'Erreur lors de la r√©cup√©ration', error: err.message });
  }
});

// üîí Supprimer une r√©servation (si utilisateur est le cr√©ateur)
router.delete('/:id', verifyToken, async (req, res) => {
  try {
    const reservation = await Reservation.findById(req.params.id);

    if (!reservation) {
      return res.status(404).json({ message: 'R√©servation introuvable' });
    }

    if (reservation.utilisateurId.toString() !== req.user.userId) {
      return res.status(403).json({ message: 'Action non autoris√©e' });
    }

    await reservation.deleteOne();
    res.status(200).json({ message: 'R√©servation supprim√©e avec succ√®s' });
  } catch (err) {
    res.status(500).json({ message: 'Erreur lors de la suppression', error: err.message });
  }
});

export default router;
